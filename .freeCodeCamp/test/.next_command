builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
echo hello bash
touch questionnaire.sh
sh questionnaire.sh
bash questionnaire.sh
which bash
ls --color=auto
./questionnaire.sh
ls --color=auto
ls --color=auto -l
__vsc_prompt_cmd_original
chmod +x questionnaire.sh
ls --color=auto -l
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
__vsc_prompt_cmd_original
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
echo --help
man echo
man echo
man echo
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
man echo
./questionnaire.sh
touch countdown.sh
chmod +x countdown.sh
./countdown.sh
./countdown.sh
./countdown.sh
./countdown.sh arg1 arg2 arg3
./countdown.sh arg1 arg2 arg3
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
./countdown.sh
./countdown.sh arg1 arg2
./countdown.sh arg1 arg2 arg3
./countdown.sh arg1 arg2 arg3
--help
help
man if
help if
./countdown.sh arg1
__vsc_prompt_cmd_original
./countdown.sh arg
./countdown.sh arg
./countdown.sh 4
./countdown.sh 6
./countdown.sh 5
help
help if
help
__vsc_prompt_cmd_original
help [[ expression ]]
help test
./countdown.sh 5
[[ 4 -le 5 ]]
echo $
echo $?
[[ 4 -le 5 ]]
echo $?
[[ 4 -ge 5 ]]
echo $?
[[ 4 -ge 5 ]]
[[ 10 -ge 5 ]]
[[ 10 -ne 5 ]]
dadfd
bad_command
ls --color=auto
ls --color=auto -y
ls --color=auto -y
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
help test
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
[[ -a countdown.sh ]]
[[ -a bad_file.txt ]]
help test
[[ -x countdown.sh ]]
help [[
[[ -x countdown.sh && 5 -le 4 ]]
[[ -x countdown.sh || 5 -le 4 ]]
./countdown.sh
./countdown.sh 1
./countdown.sh 5
./countdown.sh -3
help
./countdown.sh 10
help
ls --color=auto /
ls --color=auto -l
ls --color=auto -l
ls --color=auto /bin
ls --color=auto /bin/sleep
main sleep
man sleep
sleep 3
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
./countdown.sh 3
./countdown.sh 3
./countdown.sh 1
man while
help while
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
help while
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
help for
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
./countdown.sh 1
./countdown.sh 5
./countdown.sh 5
touch bingo.sh
chmod -x bingo.sh
chmod -x bingo.sh
chmod -x ./bingo.sh
chmod -x ./bingo.sh
chmod +x bingo.sh
./bingo.sh
printenv
echo LANG
echo $LANG
declare -p
echo $RANDOM
./bingo.sh
./bingo.sh
./bingo.sh
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
I=0
I=0
i=0
I=0
echo I
echo $I
__vsc_prompt_cmd_original
(( I++ ))
echo I
echo $I
help let
(( I+10 ))
(( I+=10 ))
__vsc_prompt_cmd_original
echo $I
$(( I+4 ))
echo $(( I+4 ))
echo $I
$(( I-6 ))
j=$(( I-6 ))
J=$(( I-6 ))
echo J
echo $J
echo $(( J*5 + 25 ))
echo $J
declare -p
K=$(( J *10 ))
echo $K
declare -p
declare K
declare -p J
declare -p K
declare -p RANDOM
echo $(( RANDOM%75 ))
echo $(( RANDOM%76 ))
echo $(( RANDOM%76 )) + 1
echo $(( RANDOM%75 +1 ))
./bingo.sh
./bingo.sh
help let
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
(( 5<6 ))
touch furtune.sh
touch fortune.sh
chmod +x fortune.sh
./fortune
fortune.sh
./fortune.sh
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
ARR=("a","b","c")
ARR=("a" "b" "c")
echo ${ARR[1]}
echo @ARR
echo $@ARR
echo @{ARR}
echo @(ARR)
echo $@
echo @ARR
echo bingo.sh countdown.sh fortune.sh questionnaire.sh
echo @
echo @ ARR
echo @[ARR]
echo @{echo}
echo @ARR[]
echo @{ARR[]}
echo @[ARR[]]
echo ${ARR[@]}
declare -p
__vsc_prompt_cmd_original
declare ARR -p
declare -p ARR
./fortune.sh
./fortune.sh
./fortune.sh
__vsc_prompt_cmd_original
./fortune.sh
./fortune.sh
help RANDOM
help RANDOM
help RADOM
help Random
ls --color=auto /bin
ls --color=auto /bin/bash
ls --color=auto /bin
declare -p random
declare -p Random
declare -p RANDOM
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
__vsc_prompt_cmd_original
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
help
man function
help function
./fortune.sh
./fortune.sh
./fortune.sh
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
help
hep until
help until
help menu
help
hep until
help until
help [[
__vsc_prompt_cmd_original
[[ 5 -ne 6 ]]
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
help test
[[ 5 -eq 6 ]]
./forturn.sh
./fortune.sh
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
help [[
help [[ expression ]]
[[ hello == hello ]]
[[ hello == world ]]
[[ hello =~ world ]]
[[ el =~ hello ]]
[[ hello =~ el ]]
[[ "hello world" =~ "lo wor" ]]
[[ "hello world" =~ ^h ]]
[[ "hello world" =~ ^h+d$ ]]
[[ "hello world" =~ ^h.+d$ ]]
VAR = "hello world"
VAR = "hello world"
VAR = "hello world"
VAR = -e "hello world"
VAR ="hello world"
VAR="hello world"
echo $VAR
__vsc_prompt_cmd_original
$[[ VAR == "hello world" ]]
[[ $VAR == "hello world" ]]
[[ $VAR == \?$ ]]
[[ $VAR == \d$ ]]
[[ $VAR == \?$ ]]
[[ $VAR =~ \?$ ]]
[[ test? =~ \?$ ]]
./fortune.sh
./fortune.sh
./fortune.sh
